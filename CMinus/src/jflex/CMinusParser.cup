/* Imported packages */
package jflex;
import java.lang.*;
import java.util.*;
import java_cup.runtime.*;


// parser code {:
//     // Connect this parser to a scanner!
//     scanner s;
//     Parser(scanner s){ this.s=s; }
// :}

//  define how to connect to the scanner! 
// init with {: s.init(); :};
// scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal INT       ;
terminal IF        ;
terminal ELSE      ;
terminal VOID      ;
terminal RETURN    ;
terminal WHILE     ;
terminal EQ        ;
terminal NOTEQ     ;
terminal GT        ;
terminal LT        ;
terminal GTEQ      ;
terminal LTEQ      ;
terminal COMMA     ;
terminal ADD       ;
terminal MULT      ;
terminal DIV       ;
terminal SEMICOL   ;
terminal SUB       ;
terminal ASSIGN    ;
terminal LBRKT     ;
terminal RBRKT     ;
terminal RSQBKT    ;
terminal LSQBKT    ;
terminal RPAREN    ;
terminal LPAREN    ;
terminal ID        ;
terminal NUM       ;
terminal WHITESPACE;

/* Non terminals */
non terminal program;
non terminal declaration_list;
non terminal declaration;
non terminal var_declaration;
non terminal type_specifier;
non terminal fun_declaration;
non terminal params;
non terminal param_list;
non terminal param;
non terminal compound_stmt;
non terminal local_declarations;
non terminal statement_list;
non terminal statement;
non terminal expression_stmt;
non terminal selection_stmt;
non terminal iteration_stmt;
non terminal return_stmt;
non terminal expression;
non terminal var;
non terminal simple_expression;
non terminal relop;
non terminal additive_expression;
non terminal addop;
non terminal term;
non terminal mulop;
non terminal factor;
non terminal call;
non terminal args;
non terminal arg_list;

precedence left ASSIGN, ADD, SUB, MULT, DIV;
precedence left ELSE;
/* 2 Rules */

start with program;

program ::= declaration_list
;

declaration_list ::= declaration_list declaration 
					| declaration
;
declaration ::= var_declaration 
				| fun_declaration
;
var_declaration ::= type_specifier ID SEMICOL 
					| type_specifier ID LSQBKT NUM RSQBKT SEMICOL
;
type_specifier ::= INT 
					| VOID
;
fun_declaration ::= type_specifier ID LPAREN params RPAREN compound_stmt
;
params ::= param_list 
			| VOID
;
param_list ::= param_list COMMA param 
				| param
;
param ::= type_specifier ID 
			| type_specifier ID LSQBKT RSQBKT
;
compound_stmt ::= LBRKT local_declarations statement_list RBRKT;
local_declarations ::= local_declarations var_declaration 
						| 
;
statement_list ::= statement_list statement 
					| 
;
statement ::= expression_stmt 
				| compound_stmt 
				| selection_stmt 
				| iteration_stmt 
				| return_stmt
;
expression_stmt ::= expression SEMICOL 
				| SEMICOL
;
selection_stmt::= IF LPAREN expression RPAREN statement 
					| IF LPAREN expression RPAREN statement ELSE statement
;
iteration_stmt ::= WHILE LPAREN expression RPAREN statement;
return_stmt ::= RETURN SEMICOL 
				| RETURN expression SEMICOL
;
expression ::= var ASSIGN expression 
				| simple_expression
;
var ::= ID 
		| ID LSQBKT expression RSQBKT
;
simple_expression ::= additive_expression relop additive_expression 
						| additive_expression
;
relop ::= LTEQ 
			| LT 
			| GT 
			| GTEQ 
			| EQ 
			| NOTEQ
;
additive_expression ::= additive_expression addop term 
						| term
;
addop ::= ADD 
			| SUB
;
term ::= term mulop factor 
			| factor
;
mulop ::= MULT 
			| DIV
;
factor ::= LPAREN expression RPAREN 
			| var 
			| call 
			| NUM
;
call ::= ID LPAREN args RPAREN
;
args ::= arg_list 
		| 
;
arg_list ::= arg_list COMMA expression 
			| expression
;